{
  "artifacts": [],
  "command": "define_and_test",
  "experiment": {
    "base_dir": "/root/Sim/Hybrid_Network_Models/Diabetes_Experiment",
    "dependencies": [
      "keras==2.8.0",
      "numpy==1.22.1",
      "pandas==1.4.0",
      "PennyLane==0.24.0",
      "sacred==0.8.2",
      "scikit-learn==1.0.2",
      "tensorflow==2.8.0"
    ],
    "mainfile": "Diabetes_Experiment_PWB_Test.py",
    "name": "Diabetes_Test",
    "repositories": [
      {
        "commit": "429df994eabf616cbaf6a1031bf0fd67721b9fa5",
        "dirty": true,
        "url": "https://github.com/st4eve/Hybrid_Network_Models.git"
      },
      {
        "commit": "429df994eabf616cbaf6a1031bf0fd67721b9fa5",
        "dirty": true,
        "url": "https://github.com/st4eve/Hybrid_Network_Models.git"
      },
      {
        "commit": "429df994eabf616cbaf6a1031bf0fd67721b9fa5",
        "dirty": true,
        "url": "https://github.com/st4eve/Hybrid_Network_Models.git"
      },
      {
        "commit": "429df994eabf616cbaf6a1031bf0fd67721b9fa5",
        "dirty": true,
        "url": "https://github.com/st4eve/Hybrid_Network_Models.git"
      }
    ],
    "sources": [
      [
        "CV_quantum_layers.py",
        "_sources/CV_quantum_layers_e02f0364d74c0558c91038471f070a26.py"
      ],
      [
        "Diabetes_Experiment_PWB_Test.py",
        "_sources/Diabetes_Experiment_PWB_Test_eb8bb89a60c5877f7ecb6850f67e32ed.py"
      ],
      [
        "Diabetes_dataset.py",
        "_sources/Diabetes_dataset_6d0fd104b76a345f3c9cbfea28eb68f2.py"
      ],
      [
        "PWBLayer_TF.py",
        "_sources/PWBLayer_TF_833368297aa9825809d30733e7a80b07.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"/root/miniconda/envs/CVTrain/lib/python3.9/site-packages/sacred/config/captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"/root/Sim/Hybrid_Network_Models/Diabetes_Experiment/Diabetes_Experiment_PWB_Test.py\", line 178, in define_and_test\n    model = Net()\n",
    "  File \"/root/Sim/Hybrid_Network_Models/Diabetes_Experiment/Diabetes_Experiment_PWB_Test.py\", line 120, in __init__\n    pre_quantum_network.append(layers.Dense(8,activation=\"relu\",\n",
    "  File \"/root/miniconda/envs/CVTrain/lib/python3.9/site-packages/keras/layers/core/dense.py\", line 111, in __init__\n    super(Dense, self).__init__(\n",
    "  File \"/root/miniconda/envs/CVTrain/lib/python3.9/site-packages/tensorflow/python/training/tracking/base.py\", line 629, in _method_wrapper\n    result = method(self, *args, **kwargs)\n",
    "  File \"/root/miniconda/envs/CVTrain/lib/python3.9/site-packages/keras/engine/base_layer.py\", line 341, in __init__\n    generic_utils.validate_kwargs(kwargs, allowed_kwargs)\n",
    "  File \"/root/miniconda/envs/CVTrain/lib/python3.9/site-packages/keras/utils/generic_utils.py\", line 1174, in validate_kwargs\n    raise TypeError(error_message, kwarg)\n",
    "TypeError: ('Keyword argument not understood:', 'constraint')\n"
  ],
  "heartbeat": "2022-08-15T18:49:30.096407",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz",
    "gpus": {
      "driver_version": "512.72",
      "gpus": [
        {
          "model": "Quadro P1000",
          "persistence_mode": true,
          "total_memory": 4096
        }
      ]
    },
    "hostname": "DESKTOP-EK9C755",
    "os": [
      "Linux",
      "Linux-5.4.72-microsoft-standard-WSL2-x86_64-with-glibc2.31"
    ],
    "python_version": "3.9.12"
  },
  "meta": {
    "command": "define_and_test",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2022-08-15T18:49:27.989988",
  "status": "FAILED",
  "stop_time": "2022-08-15T18:49:30.097340"
}